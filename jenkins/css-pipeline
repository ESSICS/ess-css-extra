#!groovyâ€‹
pipeline {

  /*
   * Environment sets up a map containing key : value pairs
   * The variables will be exported to the shell jenkins uses to execute in.
   * You can access these variables along with ones passed from the injector
   * plugin by calling ${env.<variableName>}
   */
  environment {
    MAVEN_OPTS="-Xmx2048m -Xms1024M -Xss128M -XX:-UseGCOverheadLimit"
    MVNOPT="-B -P ess-css-settings,platform-default,csstudio-composite-repo-enable,eclipse-sites"

  }

  /*
   * Agent sets up which environment that the pipeline will execute inside.
   * Can be specified to label of certain slave or spin up a docker container
   * Can be applied to each stage separately or here to set for all stages.
   */
   agent {
      docker {
        image 'europeanspallationsource/oracle-jdk-maven'
        label 'css'
      }
    }

    /*
     * build specific options, the same as the checkboxes for the jobs inside jenkins
     */
    options {
      disableConcurrentBuilds()       //Disallow concurrent executions of the Pipeline
      timeout(time:2, unit: 'HOURS')  //Set a timeout period for the Pipeline run, after which Jenkins should abort the Pipeline
      timestamps()
      skipDefaultCheckout()
    }

    /*
     * Stages Are as a checkpoint and the steps ran will show up in the jenkins ui.
     * The execution time for each stage will be monitored and all calls can be
     * overviewed from the jenkins ui
     *
     */
    stages {

      /*
       * Getting and building the "cs-studio" project.
       */
      stage('00500 - cs-studio'){
        steps{
          dir("cs-studio"){
            git(url: "${csstudioRepo}/cs-studio", branch: "${env.repoBranch}")
            dir('applications'){}
            dir('core'){}
            sh 'ls'
          }
          sh "cd cd-studio/core && mvn ${env.MVNOPT} --settings  ../../ess-css-extra/maven/settings-for-jenkins.xml clean verify"
          sh "cd cd-studio/applications && mvn ${env.MVNOPT} --settings ../../ess-css-extra/maven/settings-for-jenkins.xml clean verify"
        }
      }

      /*
       * Getting and building the "org.csstudio.display.builder" project.
       */
      stage('00550 - org.csstudio.display.builder'){
        steps{
          dir("org.csstudio.display.builder"){
            git(url: "${env.displayBuilderRepo}", branch: "${env.repoBranch}")
          }
          sh "cd org.csstudio.display.builder && mvn ${env.MVNOPT} --settings ../ess-css-extra/maven/settings-for-jenkins.xml -Dcss_repo=file:${env.WORKSPACE}/ess-css-extra/ess_css_comp_repo clean verify"
        }
      }

      /*
       * Getting and building the "org.csstudio.product" project.
       */
      stage('00600 - org.csstudio.product'){
        steps{
          dir("org.csstudio.product"){
            git(url: "${csstudioRepo}/org.csstudio.product.git", branch: "${env.repoBranch}")
          }
          sh "cd org.csstudio.product && mvn ${env.MVNOPT} --settings ../ess-css-extra/maven/settings-for-jenkins.xml clean verify"
        }
      }

      /*
       * Getting and building the "org.csstudio.ess.product" project.
       */
      stage('00700 - org.csstudio.ess.product'){
        steps{
          dir("org.csstudio.ess.product"){
            git(url: "${csstudioRepo}/org.csstudio.ess.product.git", branch: "${env.repoBranch}")
            sh "cd org.csstudio.ess.product && mvn ${env.MVNOPT} --settings ../ess-css-extra/maven/settings-for-jenkins.xml clean verify"
          }
        }
      }

      /*
       * Based on conditional, publishes binaries to a predefined artifactory server.
       * "when" allows for conditionals inside the declarative syntax.
       * The artifactory plugin doesn't fully support declarative pipeline.
       * Therefore a script-block is needed.
       */
      stage ('00700 - Ship artifact - optional') {
        when {
          environment name: 'useArtifactory', value: 'true'
        }
        steps{
          script {
            def server = Artifactory.server "${env.artifacoryServerID}"
            def versionNBR = sh (script: """grep -oEm 1 -e '<version>(.*?)</version>' ${env.WORKSPACE}/org.csstudio.ess.product/pom.xml | cut -d ">" -f2 | cut -d "<" -f1""", returnStdout: true).trim()
            def uploadSpec = """{
            "files": [
            {
              "pattern": "org.csstudio.ess.product/repository/target/products/*.tar.gz",
              "target": "${artifactoryFolder}/${versionNBR}/"
            },
            {
              "pattern": "org.csstudio.ess.product/repository/target/products/*.zip",
              "target": "${artifactoryFolder}/${versionNBR}/"
            }
            ]
            }"""
            server.upload(uploadSpec)
          }
        }
      }



    }

    /*
     * Notify developers by email depending on the status of the pipeline after the run.
     */
    post {
    /*
     * Deletes all files created by the pipeline
     */
      always {
        deleteDir()
      }

      failure {
        mail from: "jenkins@esss.se", to: "${email}", subject: "${env.JOB_BASE_NAME} failed to build", body: "${env.JOB_BASE_NAME} failed to build!\nDirect job link: ${env.RUN_DISPLAY_URL}"
      }

      success {
        mail from: "jenkins@esss.se", to: "${email}", subject: "${env.JOB_BASE_NAME} built successfully", body: "${env.JOB_BASE_NAME} built successfully!\nDirect job link: ${env.RUN_DISPLAY_URL}"
      }

    }

  }
